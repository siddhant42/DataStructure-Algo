package trie;

import java.util.Scanner;

public class Solution {
	static class TrieNode {
	    char val;
	    TrieNode left, mid, right;
	    boolean end;
	    
	    // Initialize your data structure here.
	    public TrieNode() {
	        // do nothing
	    }
	    
	    public TrieNode(char val) {
	        this.val = val;
	    }
	}
    private TrieNode root;

    public Solution() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        if (word != null && !word.isEmpty()) insert(word, 0, root);
    }
    
    private TrieNode insert(String word, int index, TrieNode node) {

    	char ch = word.charAt(index);
        if (node == null) node = new TrieNode(ch);
        if (ch < node.val) node.left = insert(word, index, node.left);
        else if (ch > node.val) node.right = insert(word, index, node.right);
        else if (index < word.length() - 1) node.mid = insert(word, index + 1, node.mid);
        else node.end = true;
        return node;
    }

    public int search(String word) {
        TrieNode head = startsWith(word,0,root);
        return search(head);
    }
    
    private int search( TrieNode node) {
        if (node == null) return 0;
        if(node.end==true){
        	return 1+search(node.left)+search(node.mid)+search(node.right);
        }
        	else 
        		return search(node.left)+search(node.mid)+search(node.right);
        }
    
    private TrieNode startsWith(String word, int index, TrieNode node) {
        if (node == null) return null;
        if(word==null || word.isEmpty()) return node;
        char ch = word.charAt(index);
        if (ch < node.val) return startsWith(word, index, node.left);
        if (ch > node.val) return startsWith(word, index, node.right);
        if (index < word.length() - 1) return startsWith(word, index + 1, node.mid);
        if ((index == word.length() - 1) && node.val==ch) return node;
        else return null;
    }
	public static void main(String[] args) {
		Solution obj = new Solution();
	    Scanner sc = new Scanner(System.in);
	        int n = sc.nextInt();
	        sc.nextLine();
	        for(int i=0;i<n;i++){
	            String str = sc.nextLine();
	            String[] s = str.split("\\s");
	            if(s[0].equals("add"))
	                obj.insert(s[1]);
	            else if(s[0].equals("find"))
	                System.out.println(obj.search(s[1]));
	        }

	}}
